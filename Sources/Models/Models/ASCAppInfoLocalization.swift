//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ASCAppInfoLocalization: AppStoreConnectBaseModel {

  public enum ASCType: String, Codable, Equatable, CaseIterable {
    case appInfoLocalizations = "appInfoLocalizations"
  }

  public var links: ASCResourceLinks

  public var id: String

  public var type: ASCType

  public var attributes: Attributes?

  public var relationships: Relationships?

  public struct Attributes: AppStoreConnectBaseModel {

    public var locale: String?

    public var name: String?

    public var privacyPolicyText: String?

    public var privacyPolicyUrl: String?

    public var subtitle: String?

    public init(
      locale: String? = nil, name: String? = nil, privacyPolicyText: String? = nil,
      privacyPolicyUrl: String? = nil, subtitle: String? = nil
    ) {
      self.locale = locale
      self.name = name
      self.privacyPolicyText = privacyPolicyText
      self.privacyPolicyUrl = privacyPolicyUrl
      self.subtitle = subtitle
    }

    public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: StringCodingKey.self)

      locale = try container.decodeIfPresent("locale")
      name = try container.decodeIfPresent("name")
      privacyPolicyText = try container.decodeIfPresent("privacyPolicyText")
      privacyPolicyUrl = try container.decodeIfPresent("privacyPolicyUrl")
      subtitle = try container.decodeIfPresent("subtitle")
    }

    public func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: StringCodingKey.self)

      try container.encodeIfPresent(locale, forKey: "locale")
      try container.encodeIfPresent(name, forKey: "name")
      try container.encodeIfPresent(privacyPolicyText, forKey: "privacyPolicyText")
      try container.encodeIfPresent(privacyPolicyUrl, forKey: "privacyPolicyUrl")
      try container.encodeIfPresent(subtitle, forKey: "subtitle")
    }

  }

  public struct Relationships: AppStoreConnectBaseModel {

    public var appInfo: AppInfo?

    public struct AppInfo: AppStoreConnectBaseModel {

      public var data: DataType?

      public var links: Links?

      public struct DataType: AppStoreConnectBaseModel {

        public enum ASCType: String, Codable, Equatable, CaseIterable {
          case appInfos = "appInfos"
        }

        public var id: String

        public var type: ASCType

        public init(id: String, type: ASCType) {
          self.id = id
          self.type = type
        }

        public init(from decoder: Decoder) throws {
          let container = try decoder.container(keyedBy: StringCodingKey.self)

          id = try container.decode("id")
          type = try container.decode("type")
        }

        public func encode(to encoder: Encoder) throws {
          var container = encoder.container(keyedBy: StringCodingKey.self)

          try container.encode(id, forKey: "id")
          try container.encode(type, forKey: "type")
        }

      }

      public struct Links: AppStoreConnectBaseModel {

        public var related: String?

        public var `self`: String?

        public init(related: String? = nil, `self`: String? = nil) {
          self.related = related
          self.`self` = `self`
        }

        public init(from decoder: Decoder) throws {
          let container = try decoder.container(keyedBy: StringCodingKey.self)

          related = try container.decodeIfPresent("related")
          `self` = try container.decodeIfPresent("self")
        }

        public func encode(to encoder: Encoder) throws {
          var container = encoder.container(keyedBy: StringCodingKey.self)

          try container.encodeIfPresent(related, forKey: "related")
          try container.encodeIfPresent(`self`, forKey: "self")
        }

      }

      public init(data: DataType? = nil, links: Links? = nil) {
        self.data = data
        self.links = links
      }

      public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        data = try container.decodeIfPresent("data")
        links = try container.decodeIfPresent("links")
      }

      public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(data, forKey: "data")
        try container.encodeIfPresent(links, forKey: "links")
      }

    }

    public init(appInfo: AppInfo? = nil) {
      self.appInfo = appInfo
    }

    public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: StringCodingKey.self)

      appInfo = try container.decodeIfPresent("appInfo")
    }

    public func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: StringCodingKey.self)

      try container.encodeIfPresent(appInfo, forKey: "appInfo")
    }

  }

  public init(
    links: ASCResourceLinks, id: String, type: ASCType, attributes: Attributes? = nil,
    relationships: Relationships? = nil
  ) {
    self.links = links
    self.id = id
    self.type = type
    self.attributes = attributes
    self.relationships = relationships
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: StringCodingKey.self)

    links = try container.decode("links")
    id = try container.decode("id")
    type = try container.decode("type")
    attributes = try container.decodeIfPresent("attributes")
    relationships = try container.decodeIfPresent("relationships")
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: StringCodingKey.self)

    try container.encode(links, forKey: "links")
    try container.encode(id, forKey: "id")
    try container.encode(type, forKey: "type")
    try container.encodeIfPresent(attributes, forKey: "attributes")
    try container.encodeIfPresent(relationships, forKey: "relationships")
  }

}

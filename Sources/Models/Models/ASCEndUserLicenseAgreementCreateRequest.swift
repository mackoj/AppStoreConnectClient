//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ASCEndUserLicenseAgreementCreateRequest: AppStoreConnectBaseModel {

  public var data: DataType

  public struct DataType: AppStoreConnectBaseModel {

    public enum ASCType: String, Codable, Equatable, CaseIterable {
      case endUserLicenseAgreements = "endUserLicenseAgreements"
    }

    public var relationships: Relationships

    public var attributes: Attributes

    public var type: ASCType

    public struct Relationships: AppStoreConnectBaseModel {

      public var app: App

      public var territories: Territories

      public struct App: AppStoreConnectBaseModel {

        public var data: DataType

        public struct DataType: AppStoreConnectBaseModel {

          public enum ASCType: String, Codable, Equatable, CaseIterable {
            case apps = "apps"
          }

          public var id: String

          public var type: ASCType

          public init(id: String, type: ASCType) {
            self.id = id
            self.type = type
          }

          public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            id = try container.decode("id")
            type = try container.decode("type")
          }

          public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(id, forKey: "id")
            try container.encode(type, forKey: "type")
          }

        }

        public init(data: DataType) {
          self.data = data
        }

        public init(from decoder: Decoder) throws {
          let container = try decoder.container(keyedBy: StringCodingKey.self)

          data = try container.decode("data")
        }

        public func encode(to encoder: Encoder) throws {
          var container = encoder.container(keyedBy: StringCodingKey.self)

          try container.encode(data, forKey: "data")
        }

      }

      public struct Territories: AppStoreConnectBaseModel {

        public var data: [DataType]

        public struct DataType: AppStoreConnectBaseModel {

          public enum ASCType: String, Codable, Equatable, CaseIterable {
            case territories = "territories"
          }

          public var id: String

          public var type: ASCType

          public init(id: String, type: ASCType) {
            self.id = id
            self.type = type
          }

          public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            id = try container.decode("id")
            type = try container.decode("type")
          }

          public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(id, forKey: "id")
            try container.encode(type, forKey: "type")
          }

        }

        public init(data: [DataType]) {
          self.data = data
        }

        public init(from decoder: Decoder) throws {
          let container = try decoder.container(keyedBy: StringCodingKey.self)

          data = try container.decodeArray("data")
        }

        public func encode(to encoder: Encoder) throws {
          var container = encoder.container(keyedBy: StringCodingKey.self)

          try container.encode(data, forKey: "data")
        }

      }

      public init(app: App, territories: Territories) {
        self.app = app
        self.territories = territories
      }

      public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        app = try container.decode("app")
        territories = try container.decode("territories")
      }

      public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(app, forKey: "app")
        try container.encode(territories, forKey: "territories")
      }

    }

    public struct Attributes: AppStoreConnectBaseModel {

      public var agreementText: String

      public init(agreementText: String) {
        self.agreementText = agreementText
      }

      public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        agreementText = try container.decode("agreementText")
      }

      public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(agreementText, forKey: "agreementText")
      }

    }

    public init(relationships: Relationships, attributes: Attributes, type: ASCType) {
      self.relationships = relationships
      self.attributes = attributes
      self.type = type
    }

    public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: StringCodingKey.self)

      relationships = try container.decode("relationships")
      attributes = try container.decode("attributes")
      type = try container.decode("type")
    }

    public func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: StringCodingKey.self)

      try container.encode(relationships, forKey: "relationships")
      try container.encode(attributes, forKey: "attributes")
      try container.encode(type, forKey: "type")
    }

  }

  public init(data: DataType) {
    self.data = data
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: StringCodingKey.self)

    data = try container.decode("data")
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: StringCodingKey.self)

    try container.encode(data, forKey: "data")
  }

}

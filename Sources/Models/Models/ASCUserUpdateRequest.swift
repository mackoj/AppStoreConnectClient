//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ASCUserUpdateRequest: AppStoreConnectBaseModel {

    public var data: DataType

    public struct DataType: AppStoreConnectBaseModel {

        public enum ASCType: String, Codable, Equatable, CaseIterable {
            case users = "users"
        }

        public var _id: String

        public var type: ASCType

        public var attributes: Attributes?

        public var relationships: Relationships?

        public struct Attributes: AppStoreConnectBaseModel {

            public var allAppsVisible: Bool?

            public var provisioningAllowed: Bool?

            public var roles: [ASCUserRole]?

            public init(allAppsVisible: Bool? = nil, provisioningAllowed: Bool? = nil, roles: [ASCUserRole]? = nil) {
                self.allAppsVisible = allAppsVisible
                self.provisioningAllowed = provisioningAllowed
                self.roles = roles
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                allAppsVisible = try container.decodeIfPresent("allAppsVisible")
                provisioningAllowed = try container.decodeIfPresent("provisioningAllowed")
                roles = try container.decodeArrayIfPresent("roles")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(allAppsVisible, forKey: "allAppsVisible")
                try container.encodeIfPresent(provisioningAllowed, forKey: "provisioningAllowed")
                try container.encodeIfPresent(roles, forKey: "roles")
            }

        }

        public struct Relationships: AppStoreConnectBaseModel {

            public var visibleApps: VisibleApps?

            public struct VisibleApps: AppStoreConnectBaseModel {

                public var data: [DataType]?

                public struct DataType: AppStoreConnectBaseModel {

                    public enum ASCType: String, Codable, Equatable, CaseIterable {
                        case apps = "apps"
                    }

                    public var _id: String

                    public var type: ASCType

                    public init(_id: String, type: ASCType) {
                        self._id = _id
                        self.type = type
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        _id = try container.decode("id")
                        type = try container.decode("type")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encode(_id, forKey: "id")
                        try container.encode(type, forKey: "type")
                    }

                }

                public init(data: [DataType]? = nil) {
                    self.data = data
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    data = try container.decodeArrayIfPresent("data")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(data, forKey: "data")
                }

            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                visibleApps = try container.decodeIfPresent("visibleApps")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(visibleApps, forKey: "visibleApps")
            }

        }

        public init(_id: String, type: ASCType, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self._id = _id
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            _id = try container.decode("id")
            type = try container.decode("type")
            attributes = try container.decodeIfPresent("attributes")
            relationships = try container.decodeIfPresent("relationships")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(_id, forKey: "id")
            try container.encode(type, forKey: "type")
            try container.encodeIfPresent(attributes, forKey: "attributes")
            try container.encodeIfPresent(relationships, forKey: "relationships")
        }

    }

    public init(data: DataType) {
        self.data = data
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        data = try container.decode("data")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(data, forKey: "data")
    }

}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

#if canImport(AppStoreConnectModels)
  import AppStoreConnectModels
  import AppStoreConnectSharedCode
#endif

extension AppStoreConnect.AppStoreVersionLocalizations {

  public enum AppStoreVersionLocalizationsGetInstance {

    public static let service = APIService<Response>(
      id: "appStoreVersionLocalizations-get_instance", tag: "AppStoreVersionLocalizations",
      method: "GET", path: "/v1/appStoreVersionLocalizations/{id}", hasBody: false,
      securityRequirement: SecurityRequirement(type: "itc-bearer-token", scopes: []))

    /** the fields to include for returned resources of type appStoreVersionLocalizations */
    public enum ASCFieldsappStoreVersionLocalizations: String, Codable, Equatable, CaseIterable {
      case appPreviewSets = "appPreviewSets"
      case appScreenshotSets = "appScreenshotSets"
      case appStoreVersion = "appStoreVersion"
      case description = "description"
      case keywords = "keywords"
      case locale = "locale"
      case marketingUrl = "marketingUrl"
      case promotionalText = "promotionalText"
      case supportUrl = "supportUrl"
      case whatsNew = "whatsNew"
    }

    /** comma-separated list of relationships to include */
    public enum ASCInclude: String, Codable, Equatable, CaseIterable {
      case appPreviewSets = "appPreviewSets"
      case appScreenshotSets = "appScreenshotSets"
      case appStoreVersion = "appStoreVersion"
    }

    /** the fields to include for returned resources of type appScreenshotSets */
    public enum ASCFieldsappScreenshotSets: String, Codable, Equatable, CaseIterable {
      case appScreenshots = "appScreenshots"
      case appStoreVersionLocalization = "appStoreVersionLocalization"
      case screenshotDisplayType = "screenshotDisplayType"
    }

    /** the fields to include for returned resources of type appPreviewSets */
    public enum ASCFieldsappPreviewSets: String, Codable, Equatable, CaseIterable {
      case appPreviews = "appPreviews"
      case appStoreVersionLocalization = "appStoreVersionLocalization"
      case previewType = "previewType"
    }

    public final class Request: APIRequest<Response> {

      public struct Options {

        /** the id of the requested resource */
        public var id: String

        /** the fields to include for returned resources of type appStoreVersionLocalizations */
        public var fieldsappStoreVersionLocalizations: [ASCFieldsappStoreVersionLocalizations]?

        /** comma-separated list of relationships to include */
        public var include: [ASCInclude]?

        /** the fields to include for returned resources of type appScreenshotSets */
        public var fieldsappScreenshotSets: [ASCFieldsappScreenshotSets]?

        /** the fields to include for returned resources of type appPreviewSets */
        public var fieldsappPreviewSets: [ASCFieldsappPreviewSets]?

        /** maximum number of related appPreviewSets returned (when they are included) */
        public var limitappPreviewSets: Int?

        /** maximum number of related appScreenshotSets returned (when they are included) */
        public var limitappScreenshotSets: Int?

        public init(
          id: String,
          fieldsappStoreVersionLocalizations: [ASCFieldsappStoreVersionLocalizations]? = nil,
          include: [ASCInclude]? = nil,
          fieldsappScreenshotSets: [ASCFieldsappScreenshotSets]? = nil,
          fieldsappPreviewSets: [ASCFieldsappPreviewSets]? = nil, limitappPreviewSets: Int? = nil,
          limitappScreenshotSets: Int? = nil
        ) {
          self.id = id
          self.fieldsappStoreVersionLocalizations = fieldsappStoreVersionLocalizations
          self.include = include
          self.fieldsappScreenshotSets = fieldsappScreenshotSets
          self.fieldsappPreviewSets = fieldsappPreviewSets
          self.limitappPreviewSets = limitappPreviewSets
          self.limitappScreenshotSets = limitappScreenshotSets
        }
      }

      public var options: Options

      public init(options: Options) {
        self.options = options
        super.init(service: AppStoreVersionLocalizationsGetInstance.service)
      }

      /// convenience initialiser so an Option doesn't have to be created
      public convenience init(
        id: String,
        fieldsappStoreVersionLocalizations: [ASCFieldsappStoreVersionLocalizations]? = nil,
        include: [ASCInclude]? = nil, fieldsappScreenshotSets: [ASCFieldsappScreenshotSets]? = nil,
        fieldsappPreviewSets: [ASCFieldsappPreviewSets]? = nil, limitappPreviewSets: Int? = nil,
        limitappScreenshotSets: Int? = nil
      ) {
        let options = Options(
          id: id, fieldsappStoreVersionLocalizations: fieldsappStoreVersionLocalizations,
          include: include, fieldsappScreenshotSets: fieldsappScreenshotSets,
          fieldsappPreviewSets: fieldsappPreviewSets, limitappPreviewSets: limitappPreviewSets,
          limitappScreenshotSets: limitappScreenshotSets)
        self.init(options: options)
      }

      public override var path: String {
        return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
      }

      public override var queryParameters: [String: Any] {
        var params: [String: Any] = [:]
        if let fieldsappStoreVersionLocalizations = options.fieldsappStoreVersionLocalizations?
          .encode().map({ String(describing: $0) }).joined(separator: ",")
        {
          params["fields[appStoreVersionLocalizations]"] = fieldsappStoreVersionLocalizations
        }
        if let include = options.include?.encode().map({ String(describing: $0) }).joined(
          separator: ",")
        {
          params["include"] = include
        }
        if let fieldsappScreenshotSets = options.fieldsappScreenshotSets?.encode().map({
          String(describing: $0)
        }).joined(separator: ",") {
          params["fields[appScreenshotSets]"] = fieldsappScreenshotSets
        }
        if let fieldsappPreviewSets = options.fieldsappPreviewSets?.encode().map({
          String(describing: $0)
        }).joined(separator: ",") {
          params["fields[appPreviewSets]"] = fieldsappPreviewSets
        }
        if let limitappPreviewSets = options.limitappPreviewSets {
          params["limit[appPreviewSets]"] = limitappPreviewSets
        }
        if let limitappScreenshotSets = options.limitappScreenshotSets {
          params["limit[appScreenshotSets]"] = limitappScreenshotSets
        }
        return params
      }
    }

    public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
      public typealias SuccessType = ASCAppStoreVersionLocalizationResponse

      /** Single AppStoreVersionLocalization */
      case status200(ASCAppStoreVersionLocalizationResponse)

      /** Parameter error(s) */
      case status400(ASCErrorResponse)

      /** Forbidden error */
      case status403(ASCErrorResponse)

      /** Not found error */
      case status404(ASCErrorResponse)

      public var success: ASCAppStoreVersionLocalizationResponse? {
        switch self {
        case .status200(let response): return response
        default: return nil
        }
      }

      public var failure: ASCErrorResponse? {
        switch self {
        case .status400(let response): return response
        case .status403(let response): return response
        case .status404(let response): return response
        default: return nil
        }
      }

      /// either success or failure value. Success is anything in the 200..<300 status code range
      public var responseResult:
        APIResponseResult<ASCAppStoreVersionLocalizationResponse, ASCErrorResponse>
      {
        if let successValue = success {
          return .success(successValue)
        } else if let failureValue = failure {
          return .failure(failureValue)
        } else {
          fatalError("Response does not have success or failure response")
        }
      }

      public var response: Any {
        switch self {
        case .status200(let response): return response
        case .status400(let response): return response
        case .status403(let response): return response
        case .status404(let response): return response
        }
      }

      public var statusCode: Int {
        switch self {
        case .status200: return 200
        case .status400: return 400
        case .status403: return 403
        case .status404: return 404
        }
      }

      public var successful: Bool {
        switch self {
        case .status200: return true
        case .status400: return false
        case .status403: return false
        case .status404: return false
        }
      }

      public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
        switch statusCode {
        case 200:
          self = try .status200(
            decoder.decode(ASCAppStoreVersionLocalizationResponse.self, from: data))
        case 400: self = try .status400(decoder.decode(ASCErrorResponse.self, from: data))
        case 403: self = try .status403(decoder.decode(ASCErrorResponse.self, from: data))
        case 404: self = try .status404(decoder.decode(ASCErrorResponse.self, from: data))
        default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
        }
      }

      public var description: String {
        return "\(statusCode) \(successful ? "success" : "failure")"
      }

      public var debugDescription: String {
        var string = description
        let responseString = "\(response)"
        if responseString != "()" {
          string += "\n\(responseString)"
        }
        return string
      }
    }
  }
}

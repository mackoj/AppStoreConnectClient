//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
#if canImport(AppStoreConnectModels)
import AppStoreConnectModels
import AppStoreConnectSharedCode
#endif

extension AppStoreConnect.AppScreenshotSets {

    public enum AppScreenshotSetsGetInstance {

        public static let service = APIService<Response>(id: "appScreenshotSets-get_instance", tag: "AppScreenshotSets", method: "GET", path: "/v1/appScreenshotSets/{id}", hasBody: false, securityRequirement: SecurityRequirement(type: "itc-bearer-token", scopes: []))

        /** the fields to include for returned resources of type appScreenshotSets */
        public enum ASCFieldsappScreenshotSets: String, Codable, Equatable, CaseIterable {
            case appScreenshots = "appScreenshots"
            case appStoreVersionLocalization = "appStoreVersionLocalization"
            case screenshotDisplayType = "screenshotDisplayType"
        }

        /** comma-separated list of relationships to include */
        public enum ASCInclude: String, Codable, Equatable, CaseIterable {
            case appScreenshots = "appScreenshots"
            case appStoreVersionLocalization = "appStoreVersionLocalization"
        }

        /** the fields to include for returned resources of type appScreenshots */
        public enum ASCFieldsappScreenshots: String, Codable, Equatable, CaseIterable {
            case appScreenshotSet = "appScreenshotSet"
            case assetDeliveryState = "assetDeliveryState"
            case assetToken = "assetToken"
            case assetType = "assetType"
            case fileName = "fileName"
            case fileSize = "fileSize"
            case imageAsset = "imageAsset"
            case sourceFileChecksum = "sourceFileChecksum"
            case uploadOperations = "uploadOperations"
            case uploaded = "uploaded"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** the id of the requested resource */
                public var id: String

                /** the fields to include for returned resources of type appScreenshotSets */
                public var fieldsappScreenshotSets: [ASCFieldsappScreenshotSets]?

                /** comma-separated list of relationships to include */
                public var include: [ASCInclude]?

                /** the fields to include for returned resources of type appScreenshots */
                public var fieldsappScreenshots: [ASCFieldsappScreenshots]?

                /** maximum number of related appScreenshots returned (when they are included) */
                public var limitappScreenshots: Int?

                public init(id: String, fieldsappScreenshotSets: [ASCFieldsappScreenshotSets]? = nil, include: [ASCInclude]? = nil, fieldsappScreenshots: [ASCFieldsappScreenshots]? = nil, limitappScreenshots: Int? = nil) {
                    self.id = id
                    self.fieldsappScreenshotSets = fieldsappScreenshotSets
                    self.include = include
                    self.fieldsappScreenshots = fieldsappScreenshots
                    self.limitappScreenshots = limitappScreenshots
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AppScreenshotSetsGetInstance.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, fieldsappScreenshotSets: [ASCFieldsappScreenshotSets]? = nil, include: [ASCInclude]? = nil, fieldsappScreenshots: [ASCFieldsappScreenshots]? = nil, limitappScreenshots: Int? = nil) {
                let options = Options(id: id, fieldsappScreenshotSets: fieldsappScreenshotSets, include: include, fieldsappScreenshots: fieldsappScreenshots, limitappScreenshots: limitappScreenshots)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let fieldsappScreenshotSets = options.fieldsappScreenshotSets?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appScreenshotSets]"] = fieldsappScreenshotSets
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                if let fieldsappScreenshots = options.fieldsappScreenshots?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appScreenshots]"] = fieldsappScreenshots
                }
                if let limitappScreenshots = options.limitappScreenshots {
                  params["limit[appScreenshots]"] = limitappScreenshots
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = ASCAppScreenshotSetResponse

            /** Single AppScreenshotSet */
            case status200(ASCAppScreenshotSetResponse)

            /** Parameter error(s) */
            case status400(ASCErrorResponse)

            /** Forbidden error */
            case status403(ASCErrorResponse)

            /** Not found error */
            case status404(ASCErrorResponse)

            public var success: ASCAppScreenshotSetResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ASCErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<ASCAppScreenshotSetResponse, ASCErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(ASCAppScreenshotSetResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ASCErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ASCErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(ASCErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
